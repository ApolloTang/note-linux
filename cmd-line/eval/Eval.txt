In a nutshell, eval turns a string into a command and executes 
the command returning the result in place of the command…

  $ A=1; B='$A'; echo $B
  $A
  $ A=1; B='$A'; eval echo $B
  1

  Here the single-quotes around ($A) make it a literal instead 
  of a variable so that $B contains ($A) instead of (1). The second 
  pass then executes (echo $A) which yields 1. Using (set -vx), 
  we can see what's happening under the covers…

  $ set -vx; A=1; B='$A'; eval echo $B   // see explanation for set at http://www.ss64.com/bash/set.html
  + set -vx
  + A=1
  + B='$A'
  + eval echo '$A'
  echo $A
  ++ echo 1
  1

Ref: http://wiki.bash-hackers.org/rcwatson
  
  
::::::::::::::::::::::::::::::::::

eval takes a string as its argument, and evaluates it as if you'd typed that 
     string on a command line. 
     (If you pass several arguments, they are first joined with spaces between them.)
     
'eval echo \${$n}' runs the parameters passed to eval. After expansion, 
the parameters are 'echo' and '${1}'. So eval echo \${$n} runs the command echo ${1}.     
Ref: http://stackoverflow.com/questions/11065077/eval-command-in-bash-and-its-typical-uses