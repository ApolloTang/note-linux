
::::::::::::
::: Find :::
::::::::::::


Useful options:

-name {pattern}		named
-path {pattern}		pathname	
-lname {pattern}	symbolic


	>  {pattern} may include shell wildcards *, ?, and [].
	>  You must escape the wildcards, however, so they are ignored by the shell and passed literally to find.
	>  Paths are relative to the directory tree being searched.
	>  prefix the above option with 'i' for case-insensitive (-iname, -ipath, -ilname)

-type [ t | f | d | l | b | c| p | s ]

	t	all (?) 
	f	plain file
	d	directories
	l	symbolic links
	b 	block devices
	c 	character devices
	p  	named pipes
	s	sockets



List all the file in current directory 

	$ find .

List all the directory in .git/ directory 

	$ find .git -type d

List top directory in current directory

	$ find . -maxdepth 1 -type d

Find a file named myfile:

	$ find / -type f -name myfile [-print]

Print ALL directory:

	$ find / -type d [-print]

Print filenames ending in “.txt” (notice how the wildcard is escaped so the shell ignores it):

	$ find / -type f -name \*.txt -print


Specifying size
~~~~~~~~~~~~~~~

b 512-byte blocks (the default if no unit is specified)
c Bytes
w 2-byte words
k Kilobytes (units of 1024 bytes)
M Megabytes (units of 1,048,576 bytes)
G Gigabytes (units of 1,073,741,824 bytes)


	look for all the regular files that match the wildcard pattern *.JPG and are larger than 1 megabyte
	
	$ find ~ -type f -name "*.JPG" -size +1M
		> notice we enclode *.JPG in quotes to prevent pathname expansion by the shell

	
	$ find ~ -type f -name "*.JPG" -size -1M
		> less than 1M

	$ find ~ -type f -name "*.JPG" -size -1M
		> exactly 1M

    $ find ~ -type f -name '*.BAK' -delete  // doesn't work on MINGW32

Sort by time
~~~~~~~~~~~~

find . -printf "%T@ %Tc %p\n" | sort -n
find . -printf "%T@ %Tc %p\n" | sort -nr

	%Tk: File's last modification time in the format specified by k.
	@: seconds since Jan. 1, 1970, 00:00 GMT, with fractional part.
	c: locale's date and time (Sat Nov 04 12:02:33 EST 1989).
	%p: File's name.

	from http://superuser.com/questions/294161/unix-linux-find-and-sort-by-date-modified

	The above can be put into a script file as:
		#!/bin/bash
		find $1 -name "$2" -printf "%T@ %Tc %p\n" | sort -nr
		# usage example: sh fst.sh path/to/find/whatever/you/want "*.t"
	

Note on using -exec
~~~~~~~~~~~~~~~~~~~
	
A -exec command must be terminated with a ; (so you usually need to type \; or ';' to avoid 
interpretion by the shell) or a +. 

The difference is that with ;, the command is called once 
per file, with +, it is called just as few times as possible
(usually once, but there is a maximum length for a command 
line, so it might be split up) with all filenames. See this example:

	$ cat /tmp/echoargs
	#!/bin/sh
	echo $1 - $2 - $3
	$ find /tmp/foo -exec /tmp/echoargs {} \;
	/tmp/foo - -
	/tmp/foo/one - -
	/tmp/foo/two - -
	$ find /tmp/foo -exec /tmp/echoargs {} +
	/tmp/foo - /tmp/foo/one - /tmp/foo/two
	
	from: http://stackoverflow.com/questions/2961673/find-missing-argument-to-exec