Tilde Expansion [~]: need to prefix a word, postfix has not effect
                     by itself expands into the path of current user's home directory
                     with a user name it expands into the path of named user's home directory
                        $ echo ~
                        $ echo ~user1
                     
Arithmetic Expansion:   $((<expression to evaluate>))
                        allow operator:
                            + - * / % ** ( )
                            operate on integer only.
                            echo $(($((5**2)) * 3))
                            $ echo $(((5**2) * 3))
                            
Brace Expansion:    Comma-separated list     
                    $ echo Front-{A,B,C}-Back
                            expands into: 
                            Front-A-Back Front-B-Back Front-C-Back
                        [?not sure] in the above 'Front-' is called the preamble 
                        [?not sure] where '-Back' is called the postscript.
                    
                    Range     
                    $ echo Number_{1..5}
                            expands into:
                            Number_1 Number_2 Number_3 Number_4 Number_5
                    
                    Nested
                    $ echo a{A{1,2},B{3,4}}b
                        expands into: aA1b aA2b aB3b aB4b
                        
               $ mkdir {2009..2011}-0{1..9} {2009..2011}-{10..12}
               $ ls
                2009-01 2009-07 2010-01 2010-07 2011-01 2011-07
                2009-02 2009-08 2010-02 2010-08 2011-02 2011-08
                2009-03 2009-09 2010-03 2010-09 2011-03 2011-09
                2009-04 2009-10 2010-04 2010-10 2011-04 2011-10
                2009-05 2009-11 2010-05 2010-11 2011-05 2011-11
                2009-06 2009-12 2010-06 2010-12 2011-06 2011-12

Parameter Expansion: 
                       $ echo $PATH
                    
                    To list all parameter: 
                        $ printenv | less  (printenv doesn't exist in git-bash)
                    

Command Substitution:
                    $ ls -l $(which git)
                    -rwxr-xr-x  109 Apollo   Administ  1363968 Nov  1  2012 /bin/git
                        the above eg. show you how you can
                        list file's property without know the path to that file.
                    
                    more from: http://stackoverflow.com/questions/11065077/eval-command-in-bash-and-its-typical-uses
                    $(...) runs the command specified inside the parentheses in a subshell 
                    (i.e. in a separate process that inherits all settings such as variable 
                    values from the current shell), and gathers its output. So 
                        $ n=1    // n=1 won't work in git bash
                        $ echo $($n) 
                        > command not found
                    runs $n as a shell command, and displays its output. Since $n evaluates to 1, $($n) 
                    attempts to run the command 1, which does not exist.
                    
Old style Command Substitution:
                    
                    `<command>` = $(<command>)    
                    $ ls -l `which git`  = ls -l $(which git)
                        
                        
Note: Double quote does not suppress the following:

$x 	parameter expansion
$((x))	arithmetic expansion
$(x)	command substitution
`x`	old style command substitution
\x	escape