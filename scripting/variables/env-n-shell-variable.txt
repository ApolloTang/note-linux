
Standard UNIX variables are split into two categories:

    environment variables
    shell variables.

shell variables apply only to the current instance of the shell
and are used to set short-term working conditions;

environment variables have a farther reaching significance, and
those set at login are valid for the duration of the session.

By convention environment variables have UPPER CASE and shell
variables have lower case names.

    http//www.ee.surrey.ac.uk/Teaching/Unix/unix8.html
    http://stackoverflow.com/questions/3341372/differnce-between-the-shell-and-environment-variable-in-bash

The Bourne shell family does not really distinguish between shell
and environment variables.

When a shell starts up, it reads the information in the table
of environment variables, defines itself a shell variable for
each one, using the same name, and copies the values.

From that point on, the shell only refers to its shell variables.

If a change is made to a shell variable, it must be explicitly
"exported" to the corresponding environment variable in order
for any forked subprocesses to see the change.

    $ sh -c "echo \$MY_ENV"          #env var
                                     # empty line
    $ export MY_ENV='my exported environment'
    $ sh -c "echo \$MY_ENV"
    my exported environment

    Ref: http://sc.tamu.edu/help/general/unix/vars.html

Once exported the variable is marked to be inherited by children.

    $ MY_ENV='value mutilated'
    $ sh -c "echo \$MY_ENV"
    value mutilated

If you want to sever this inheritence (or to un-export it)
for it to become unset in children processes:

    $ typeset +x MY_ENV
    $ sh -c "echo \$MY_ENV"
                                 # empty line, it is now undefined in child process
    $ echo $MY_ENV
    value mutilated              # value only exist locally

    Ref: http://unix.stackexchange.com/questions/58061/difference-between-environment-variable-and-shell-variable

To print a list of variable name and its value:

    set    'set' print both the variable available to this shell
           including: environment and local variables as well as
           shell functions.
    env    'env' print environment variables

        $ myVar=myVar       # local only
        $ env | grep myVar
                            # empty line not exist in environment
        $ set | grep myVar  # print local & environment
        myVar=myVar

    Strickly specking:

      • "set" is bash builtin and "env" is not.
      • "env" is used to launch programs in a new environment, and
        with no arguments will output what that new environment would
        be. Since env is creating a new environment, only exported
        variables are brought through
        Ref: http://unix.stackexchange.com/questions/3507/difference-between-environment-variables-and-exported-environment-variables-in-b
      • you can limit "set" to exclude print function with:
        (set -o posix; set)
        Ref: http://askubuntu.com/questions/275965/how-to-list-all-variables-names-and-their-current-values

    Other way to print a list of environment variable:

        $ printenv
        $ export


----------------------

    You can also do something like this:

    VAR=val application
    For example:

    LANG=C ls --help
    output in English.

    LANG=pl_PL ls --help
    output in Polish (if avaliable).

    In the past in sh you couldn't do export VAL=val. You had to

    VAL=val; export VAL

    Ref:
    http://superuser.com/questions/143413/setting-linux-environment-variables

---------------------

ToREAD:
https://www.digitalocean.com/community/tutorials/how-to-read-and-set-environmental-and-shell-variables-on-a-linux-vps
http://superuser.com/questions/143413/setting-linux-environment-variables









